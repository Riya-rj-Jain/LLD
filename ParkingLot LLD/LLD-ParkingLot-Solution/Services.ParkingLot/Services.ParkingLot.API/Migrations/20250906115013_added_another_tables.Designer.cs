// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.ParkingLot.API.Data;

#nullable disable

namespace Services.ParkingLot.API.Migrations
{
    [DbContext(typeof(ParkingLotDbContext))]
    [Migration("20250906115013_added_another_tables")]
    partial class added_another_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<int>("Floor_number")
                        .HasColumnType("int");

                    b.Property<int>("numberOfSlots")
                        .HasColumnType("int");

                    b.HasKey("FloorId");

                    b.HasIndex("Floor_number")
                        .IsUnique();

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Pricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price_per_hour")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Price_per_minute")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Pricing");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SlotName")
                        .HasColumnType("longtext");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("SlotId");

                    b.HasIndex("FloorId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExitTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("totalprice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Pricing", b =>
                {
                    b.HasOne("Services.ParkingLot.API.Models.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Slot", b =>
                {
                    b.HasOne("Services.ParkingLot.API.Models.Entities.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.ParkingLot.API.Models.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("Floor");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Services.ParkingLot.API.Models.Entities.Ticket", b =>
                {
                    b.HasOne("Services.ParkingLot.API.Models.Entities.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.ParkingLot.API.Models.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("VehicleType");
                });
#pragma warning restore 612, 618
        }
    }
}
